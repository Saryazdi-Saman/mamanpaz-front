# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

# name: Node.js CI

# on:
#   push:
#     branches: [ "main" ]

# jobs:
#   build:

#     runs-on: self-hosted

#     strategy:
#       matrix:
#         node-version: [20.18.0]
#         # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

#     steps:
#     - uses: actions/checkout@v4
#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ matrix.node-version }}
#         cache: 'npm'
#     - run: npm ci
#     - run: npm run build --if-present
#     # - run: npm test

name: Deploy new versions

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Detect active and available containers
        run: |
          OUTPUT=$(~/bin/check-active-container)
          ACTIVE_CONTAINER=$(echo "$OUTPUT" | grep "Active container:" | cut -d ':' -f 2 | xargs)
          AVAILABLE_CONTAINER=$(echo "$OUTPUT" | grep "Available container:" | cut -d ':' -f 2 | xargs)
          AVAILABLE_PORTS=$(echo "$OUTPUT" | grep "Ports to use" | cut -d ':' -f 2 | xargs)
          echo "ACTIVE_CONTAINER=$ACTIVE_CONTAINER" >> $GITHUB_ENV
          echo "AVAILABLE_CONTAINER=$AVAILABLE_CONTAINER" >> $GITHUB_ENV
          echo "AVAILABLE_PORTS=$AVAILABLE_PORTS" >> $GITHUB_ENV
          echo "Deploying to $AVAILABLE_CONTAINER container"

      - name: Check and create deployment directory
        run: |
          if [ ! -d "${{ env.AVAILABLE_CONTAINER }}" ]; then
            echo "Creating directory: ${{ env.AVAILABLE_CONTAINER }}"
            mkdir -p ${{ env.AVAILABLE_CONTAINER }}
          else
            echo "Directory ${{ env.AVAILABLE_CONTAINER }} already exists"
          fi

      - name: Check available ports
        run: |
          for port in $(echo "${{ env.AVAILABLE_PORTS }}" | tr "," "\n"); do
            if pm2 list | grep -q "$port"; then
              echo "Killing process on port $port"
              pm2 delete $(pm2 list | grep "$port" | awk '{print $2}')
            fi
          done

      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: ${{ env.AVAILABLE_CONTAINER }}

      - name: Install dependencies and build
        run: |
          cd ${{ env.AVAILABLE_CONTAINER }}
          npm ci
          npm run build

      - name: Deploy application
        run: |
          cd ${{ env.AVAILABLE_CONTAINER }}
          TARGET_PATH=$(pwd)
          echo "Target Path: $TARGET_PATH"
          ~/bin/mamanpaz-front-start $TARGET_PATH
